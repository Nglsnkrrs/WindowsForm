Можно также использовать метод Increment(), передавая ему в качестве параметра значение, на которое
меняется состояние индикатора:
this.progressBar1.Increment(25);
В нашем примере представлен элемент ProgressBar
и элемент Label, которые начинают динамически менять
своё состояние по нажатию кнопки. На Label отображается
значение свойства Value элемента ProgressBar.
15
5. Индикатор. Класс ProgressBar
Pисунок 6
В обработчике события нажатия кнопки мы устанавливаем минимальное и максимальное начения ProgressBar,
шаг и в цикле вызываем метод PerformStep() для выполнения шага. При этом каждый раз происходит обновление
формы и задержка на 50 милисекунд, чтобы мы успевали
следить за изменениями ProgressBar , а также постоянно
меняющимися значениями текста на ярлыке.
private void button1_Click(object sender, EventArgs e)
{
 progressBar1.Minimum = 0;
 progressBar1.Maximum = 50;
 progressBar1.Step = 1;
 for (int i = 0; i <= 50; i++)
 {
 progressBar1.PerformStep();
 label1.Text = "Value = " +
 progressBar1.Value.ToString();
 this.Update(); Thread.Sleep(50);
 }
}
16
Урок №1
6. Полосы прокрутки.
Классы VScrollBar, HScrollBar
Большинство элементов управления, которые нуждаются в полосе прокрутки, как правило, предоставляют их
по умолчанию. Это касается, например, таких элементов,
как TextBox, ListBox, ComboBox.
Элементы, производные от ScrollableControl, такие
как Form и Panel, тоже отображают полосы прокрутки,
если значение их свойства AutoScroll установлено в true.
Можно также использовать полосы прокрутки в тех
элементах-контейнерах, которые не предоставяют их по
умолчанию.
VScrollBar vscroll = new VScrollBar();
vscroll.Dock = DockStyle.Bottom;
this.pictureBox1.Controls.Add(vscroll);
Или просто перетащим элемент управления VScrollBar
на форму и установим его свойство Dock в нужное значение. Тогда при запуске формы размеры скрола меняются
динамически, в зависимости от изменения размеров самого
окна. Основными свойствами полосы прокрутки являются Minimum, Maximum, SmallChanged, LargeChanged
и Value. Программа сама устанавливает начальные значения этих свойств. Value меняется в зависимости от
положения бегунка на полосе прокрутки.
17
7. Счетчик. Класс NumericUpDown
7. Счетчик.
Класс NumericUpDown
Это элемент управления, внешне немного напоминающий верхнее поле ComboBox. Но он содержит единственное числовое значение, способное увеличиваться или
уменьшаться при нажатии соответствующих кнопок со
стрелочками с правой стороны поля контрола. Это кнопки
UpButton и DownButton, при их нажатии инициируются
методы, влияющие на значение счётчика (рис. 7).
Pисунок 7
Числовое значение данного контрола является десятичным, т.е. decimal. Это значит, что мы можем пользоваться
не только целочисленными значениями в этом счётчике.
Числовые значения могут отображаться не только в десятичном виде, но и шестнадцатеричном, для этого нужно
установить значение свойства Hexadecimal в true (рис. 8).
Pисунок 8
Свойство DecimalPaces позволяет определить, сколько знаков после десятичной точки мы хотим отбражать
в значении счётчика